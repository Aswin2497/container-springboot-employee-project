image: maven:latest

variables:
  MAVEN_CLI_OPTS: "-s .m2/settings.xml --batch-mode"
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
  BUILDNAME: 'maven-project'
  CI_PROJECT_NAME: 'maven-project-helloworld'

cache:
  paths:
    - .m2/repository/
    - target/
    
stages:
    - Build
    - test
    - scan
    - package
    - publish
    
    - deploy
    - downandup

build:
  stage: Build
  script:
    - pwd
#    - echo $MAVEN_REPO_PASS
#    - echo $MAVEN_REPO_URL
#    - echo $MAVEN_REPO_USER
#    - echo $CURR_IP
#    - mvn $MAVEN_CLI_OPTS compile
    - mvn package
  artifacts:
    name: "$CI_JOB_NAME-package"
    paths:
    - target/*.jar
    
.test:
    stage: test
    tags:
    - test
    - shell
    script:
        - mvn $MAVEN_CLI_OPTS test
    artifacts:
      name: "$CI_JOB_NAME-buildfiles"
      paths:
      - target/

        
.scan:
  stage: scan
  tags:
    - scan
    - shell
  script:
    - mvn clean install
    - mvn package sonar:sonar -Dsonar.host.url=http://13.234.226.223:9000
    #- mvn --batch-mode verify sonar:sonar -Dsonar.host.url=$SONAR_URL -Dsonar.login=$SONAR_LOGIN -Dsonar.password=$SONAR_PASSWORD
  only:
    - master

.zip:
  stage: package
  tags:
    - shell
  script:
    - zip -r ${BUILDNAME}.zip *
  artifacts:
    name: "$CI_JOB_NAME"
    paths:
    - ${BUILDNAME}.zip


.Docker-Build:
  stage: publish
  script:
    - pwd
    - ls -a
    - docker build . --tag ${BUILDNAME}:${CI_PIPELINE_ID} --build-arg BUILDNAME="${BUILDNAME}.zip"
  tags:
    - shell

.publish:
  stage: publish
  tags:
    - publish
    - shell

  script:
    - mvn $MAVEN_CLI_OPTS deploy
.Deploy:
    dependencies: []
    stage: deploy
    script:
        - docker stack deploy --compose-file docker-stack.yml ${CI_PROJECT_NAME} 
        - docker stack ps ${CI_PROJECT_NAME}
    tags:
    - shell
    - deploy

.deploy:
  stage: deploy
  tags:
    - deploy
    - shell

  script:
    - mvn tomcat7:deploy
    - mvn tomcat7:run
  only:
    - master

.download:
  stage: downandup
  cache:
    key: art
    paths:
      - ./
  tags:
    - deploy
    - shell
    
  script:
    - ls -l -a
    - wget -N --user $JROG_USER --password $JFROG_PASS http://$CURR_IP:8081/artifactory/libs-release-local/org/springframework/gs-maven/0.1.0/gs-maven-0.1.0.jar
    - ls -l -a
    - pwd

.upload:
  stage: downandup
  cache:
    key: art
    paths:
      - ./
  tags:
    - deploy
    - shell
    
  script:
    - pwd
    - ls -l -a
    #- cd ./.m2/repository/
   # - ls -l -a
    - curl -v -X PUT --user $JROG_USER:$JFROG_PASS --upload-file ./gs-maven-0.1.0.jar http://$CURR_IP:8081/artifactory/libs-release-local/my/jars/gs-maven-0.1.0.jar
